@using JahanJooy.Common.Util.Text
@using JahanJooy.Common.Util.Web.Extensions
@using JahanJooy.RealEstate.Domain.Enums
@using JahanJooy.RealEstate.Util.Resources
@using JahanJooy.RealEstate.Web.Content
@using JahanJooy.RealEstate.Web.Models.Property
@using JahanJooy.RealEstate.Web.Resources.Views.Shared.Property.Edit
@using JahanJooy.RealEstate.Web.Scripts
@model PropertySalePaymentModel

@this.ScriptLibrary(JavaScriptLibraries.JQueryUI)

@this.ScriptBlock(@<script type="text/javascript"> applyDigitGrouping(); </script>)

@this.StyleLibrary(StyleLibraries.JQueryUiAll)

@Html.HiddenFor(m => m.PropertyType)
@Html.HiddenFor(m => m.EstateArea)
@Html.HiddenFor(m => m.UnitArea)

<div class="panel panel-primary">
    <div class="panel-heading">
        <h3 class="panel-title">قیمت ملک</h3>
    </div>
    <div class="panel-body">
        <div class="row">
            <div class="col-xs-12 col-md-7">
                <div class="form-group">
                    <div class="col-xs-12">
                        <span class="icon-required"></span>
                        @Html.LabelFor(m => m.PriceSpecificationType):
                        @Html.ValidationMessageFor(m => m.PriceSpecificationType)
                    </div>
                </div>
                <div>
                    <div class="form-group">
                        <div class="col-xs-12">
                            @Html.RadioButtonFor(m => m.PriceSpecificationType, SalePriceSpecificationType.Total, new {@id = "PriceSpecificationType_Total"})
                            @Html.Label("PriceSpecificationType_Total", DomainEnumResources.PriceSpecificationType_Total)
                        </div>
                    </div>
                </div>
                <div class="@("none".If(!Model.CanSpecifyPerEstateArea))">
                    <div class="form-group">
                        <div class="col-xs-12">
                           
                            @Html.RadioButtonFor(m => m.PriceSpecificationType, SalePriceSpecificationType.PerEstateArea, new {@id = "PriceSpecificationType_PerEstateArea"})
                            @Html.Label("PriceSpecificationType_PerEstateArea", DomainEnumResources.PriceSpecificationType_PerEstateArea)
                        </div>
                    </div>
                </div>
               
                <div class="@("none".If(!Model.CanSpecifyPerUnitArea))">
                    <div class="form-group">
                        <div class="col-xs-12">
                            @Html.RadioButtonFor(m => m.PriceSpecificationType, SalePriceSpecificationType.PerUnitArea, new {@id = "PriceSpecificationType_PerUnitArea"})
                            @Html.Label("PriceSpecificationType_PerUnitArea", DomainEnumResources.PriceSpecificationType_PerUnitArea)
                        </div>
                    </div>
                </div>
                
                <div id="pricingTotal"class="none">
                    <div class="form-group">
                        <div class="col-xs-5">
                            <span class="icon-required"></span>
                            @Html.LabelFor(m => m.Price):
                        </div>
                        <div class="col-xs-7">
                            <div class="input-group">
                                @Html.TextBoxFor(m => m.Price, "{0:0.##}", new {style = "direction:ltr;text-align:center;", @class = "digitGrouping"})
                                <span class="input-group-addon">@GeneralResources.Tomans</span>
                            </div>
                            @Html.ValidationMessageFor(m => m.Price)
                        </div>
                    </div>
                </div>
                
                <div id="pricingPerEstateArea" class="none">
                    <div class="form-group">
                        <div class="col-xs-6">
                            <span class="icon-required"></span>
                            @Html.LabelFor(m => m.PricePerEstateArea):
                        </div>
                        <div class="col-xs-6">
                            <div class="input-group">
                                @Html.TextBoxFor(m => m.PricePerEstateArea, "{0:0.##}", new {style = "direction:ltr;text-align:center;", @class = "digitGrouping"})
                                <span class="input-group-addon">@GeneralResources.Tomans</span>
                            </div>
                            @Html.ValidationMessageFor(m => m.PricePerEstateArea)
                        </div>
                    </div>
                </div>
                
                <div id="pricingPerUnitArea" class="none">
                    <div class="form-group">
                        <div class="col-xs-5">
                            <span class="icon-required"></span>
                            @Html.LabelFor(m => m.PricePerUnitArea):
                        </div>
                        <div class="col-xs-7">
                            <div class="input-group">
                                @Html.TextBoxFor(m => m.PricePerUnitArea, "{0:0.##}", new {style = "direction:ltr;text-align:center;", @class = "digitGrouping"})
                                <span class="input-group-addon">@GeneralResources.Tomans</span>
                            </div>
                            @Html.ValidationMessageFor(m => m.PricePerUnitArea)
                        </div>
                    </div>
                </div>
            </div>
            <div class="col-xs-12 col-md-5" id="calculated">
                <div class="panel panel-info">
                    <div class="panel-heading">
                        <h3 class="panel-title">قیمت محاسبه شده:</h3>
                    </div>
                    <div class="panel-body">
                        <div class="row">
                            <div class="col-xs-5">
                                @EditPropertyPaymentConditionsForSaleResources.Label_Calculated_Price
                            </div>
                            <div class="col-xs-7">
                                <span id="calculatedPriceTotal">0.0</span>
                                <span>@GeneralResources.Tomans</span>
                            </div>
                        </div>

                        <div class="@("none".If(!Model.CanSpecifyPerEstateArea)) row">
                            <div class="col-xs-5">
                                @EditPropertyPaymentConditionsForSaleResources.Label_Calculated_PricePerEstateArea
                            </div>
                            <div class="col-xs-7">
                                <span id="calculatedPricePerEstateArea">0.0</span>
                                <span>@GeneralResources.Tomans</span>
                            </div>
                        </div>

                        <div class="@("none".If(!Model.CanSpecifyPerUnitArea)) row">
                            <div class="col-xs-5">
                                @EditPropertyPaymentConditionsForSaleResources.Label_Calculated_PricePerUnitArea
                            </div>
                            <div class="col-xs-7">
                                <span id="calculatedPricePerUnitArea">0.0</span>
                                <span>@GeneralResources.Tomans</span>
                            </div>
                        </div>
                    </div>
                </div>
            </div>
        </div>

    </div>
</div>
	


	


<div class="panel panel-primary">
    <div class="panel-heading">
        <h3 class="panel-title">شرایط پرداخت</h3>
    </div>
    <div class="panel-body">

        <div class="form-group">
            <div class="col-xs-12 col-sm-5 col-md-3">
                @Html.LabelFor(m => m.PaymentPercentForContract):
            </div>
            <div class="col-xs-3 col-sm-2">
                @Html.TextBoxFor(m => m.PaymentPercentForContract, new {style = "direction:ltr;text-align:center;"})
            </div>
            <div class="col-xs-6 col-sm-5">
                @GeneralResources.Percent =
                <span id="calculatedPaymentForContract">0.0</span>
                @GeneralResources.Tomans
                @Html.ValidationMessageFor(m => m.PaymentPercentForContract)
            </div>
        </div>
        <div class="form-group">
            <div class="col-xs-10 col-sm-8 col-md-6" id="sliderPaymentPercentForContract">
            </div>
        </div>
        <br/>
        <div class="form-group">
            <div class="col-xs-12 col-sm-5 col-md-3">
                @Html.LabelFor(m => m.PaymentPercentForDelivery):
            </div>
            <div class="col-xs-3 col-sm-2">
                @Html.TextBoxFor(m => m.PaymentPercentForDelivery, new {style = "direction:ltr;text-align:center;"})
            </div>
            <div class="col-xs-6 col-sm-5">
                @GeneralResources.Percent =
                <span id="calculatedPaymentForDelivery">0.0</span>
                @GeneralResources.Tomans
                @Html.ValidationMessageFor(m => m.PaymentPercentForDelivery)
            </div>
        </div>
        <div class="form-group">
            <div class="col-xs-10 col-sm-8 col-md-6" id="sliderPaymentPercentForDelivery">
            </div>
        </div>
        <br />
    </div>
</div>


<div class="panel panel-default">
    <div class="panel-heading">
        <h3 class="panel-title">
            تقسیط و وام
        </h3>
    </div>
    <div class="panel-body">
        <div class="form-group">
            <div class="col-xs-8">
                @Html.CheckBoxFor(m => m.HasTransferableLoan)
                @Html.LabelFor(m => m.HasTransferableLoan)
            </div>
        </div>
        <div id="transferableLoanDetails" class="none">
            <div class="form-group">
                <div class="col-xs-5 col-sm-4">
                    @Html.LabelFor(m => m.TransferableLoanAmount):
                </div>
                <div class="col-xs-6 col-sm-4">
                    <div class="input-group">
                        @Html.TextBoxFor(m => m.TransferableLoanAmount, "{0:0.##}", new {style = "direction:ltr;text-align:center;", @class = "digitGrouping"})
                        <span class="input-group-addon">@GeneralResources.Tomans</span>
                    </div>
                    @Html.ValidationMessageFor(m => m.TransferableLoanAmount)
                </div>

            </div>

        </div>
       
        <div class="form-group">
            <div class="col-xs-12">
                @Html.CheckBoxFor(m => m.CanHaveDebt)
                @Html.LabelFor(m => m.CanHaveDebt)
            </div>
        </div>
        
        <div class="none" id="debtDetails">
            <div class="form-group">
                <div class="col-xs-12 col-sm-4">
                    @Html.LabelFor(m => m.PaymentPercentForDebt):
                </div>
                <div class="col-xs-3 col-sm-2 ">
                    @Html.TextBoxFor(m => m.PaymentPercentForDebt, new {style = "direction:ltr;text-align:center;"})
                </div>
                <div class="col-xs-6 col-sm-5">
                    @GeneralResources.Percent =
                    <span id="calculatedDebt">0.0</span>
                    @GeneralResources.Tomans
                    @Html.ValidationMessageFor(m => m.PaymentPercentForDebt)
                </div>
            </div>
            <div class="row">
                <div class="col-xs-10 col-sm-8 col-md-6" id="sliderPaymentPercentForDebt">
                </div>
            </div>
            <br/>
            <br />
            <div class="form-group">
                <div class="col-xs-12 col-sm-4">
                    @Html.LabelFor(m => m.MinimumMonthlyPaymentForDebt):
                </div>
                <div class="col-xs-12 col-sm-8">
                    <div class="form-group">
                        <div class="col-xs-6 col-sm-5">
                            @Html.TextBoxFor(m => m.MinimumMonthlyPaymentForDebt, "{0:#.##}", new {style = "direction:ltr;text-align:center;", @class = "digitGrouping"})
                        </div>
                        <div class="col-xs-2 col-sm-2">
                            @GeneralResources.Tomans
                        </div>
                        <div class="col-xs-4 col-sm-5">
                            @Html.ValidationMessageFor(m => m.MinimumMonthlyPaymentForDebt)
                        </div>
                    </div>
                </div>
            </div>
            
            <div class="form-group">
                <div class="col-xs-12 col-sm-4">
                    @Html.LabelFor(m => m.DebtGuaranteeType):
                </div>
                <div class="col-xs-7 col-sm-5 col-md-4">
                    @Html.DropDownListFor(m => m.DebtGuaranteeType, Model.DebtGuaranteeType.EnumSelectList(DomainEnumResources.ResourceManager), GeneralResources.NotSelected, new {@class = "select2 form-control"})
                    @Html.ValidationMessageFor(m => m.DebtGuaranteeType)
                </div>
            </div>
        </div>
    </div>
</div>	

@this.ScriptBlock(@<script type="text/javascript">

                       function OnPriceSpecificationTypeChanged() {
                           if ($("#PriceSpecificationType_Total")[0].checked) $("#pricingTotal").show(400);
                           else $("#pricingTotal").hide(400);
                           if ($("#PriceSpecificationType_PerEstateArea")[0].checked) $("#pricingPerEstateArea").show(400);
                           else $("#pricingPerEstateArea").hide(400);
                           if ($("#PriceSpecificationType_PerUnitArea")[0].checked) $("#pricingPerUnitArea").show(400);
                           else $("#pricingPerUnitArea").hide(400);
                           $("#priceValidationErrors .field-validation-error").empty();
                           $("#Price").attr('disabled', !($("#PriceSpecificationType_Total")[0].checked));
                           $("#PricePerEstateArea").attr('disabled', !($("#PriceSpecificationType_PerEstateArea")[0].checked));
                           $("#PricePerUnitArea").attr('disabled', !($("#PriceSpecificationType_PerUnitArea")[0].checked));
                           RecalculatePrices();
                       }

                       function OnCanHaveDebtChanged() {
                           if (this.checked) $("#debtDetails").show(400);
                           else $("#debtDetails").hide(400);
                           $("#PaymentPercentForDebt").attr("disabled", !this.checked);
                           $("#DebtGuaranteeType").attr("disabled", !this.checked);
                       }

                       function OnHasTransferableLoanChanged() {
                           if (this.checked) $("#transferableLoanDetails").show(400);
                           else $("#transferableLoanDetails").hide(400);
                           $("#TransferableLoanAmountM").attr("disabled", !this.checked);
                       }

                       function RecalculatePrices() {

                           // Extract total price

                           var estateArea = parseFormattedFloat($("#EstateArea").val());
                           var unitArea = parseFormattedFloat($("#UnitArea").val());
                           var totalPrice = NaN;

                           if ($("#PriceSpecificationType_Total")[0].checked)
                               totalPrice = parseFormattedFloat($("#Price").val());
                           else if ($("#PriceSpecificationType_PerEstateArea")[0].checked)
                               totalPrice = parseFormattedFloat($("#PricePerEstateArea").val()) * estateArea;
                           else if ($("#PriceSpecificationType_PerUnitArea")[0].checked)
                               totalPrice = parseFormattedFloat($("#PricePerUnitArea").val()) * unitArea;

                           // Update calculated price display

                           var perEstateAreaPrice = totalPrice / estateArea;
                           var perUnitAreaPrice = totalPrice / unitArea;

                           $("#calculatedPriceTotal").text(isFinite(totalPrice) ? shortNumericString(totalPrice) : "-");
                           $("#calculatedPricePerEstateArea").text(isFinite(perEstateAreaPrice) ? shortNumericString(perEstateAreaPrice) : "-");
                           $("#calculatedPricePerUnitArea").text(isFinite(perUnitAreaPrice) ? shortNumericString(perUnitAreaPrice) : "-");

                           // Slider: payment percent for contract

                           var valPaymentPercentForContract = parseFormattedFloat($("#PaymentPercentForContract").val());
                           if (isFinite(valPaymentPercentForContract)) {
                               if (valPaymentPercentForContract > 100) valPaymentPercentForContract = 100;
                               if (valPaymentPercentForContract < 0) valPaymentPercentForContract = 0;

                               if (!$("#PaymentPercentForContract").is(":focus"))
                                   $("#PaymentPercentForContract").val(valPaymentPercentForContract);
                           }
                           var calculatedPaymentForContract = totalPrice * valPaymentPercentForContract / 100;
                           $("#sliderPaymentPercentForContract").slider("value", isFinite(valPaymentPercentForContract) ? valPaymentPercentForContract : 0);
                           $("#calculatedPaymentForContract").text(isFinite(calculatedPaymentForContract) ? shortNumericString(calculatedPaymentForContract) : "-");

                           // Slider: payment percent for delivery

                           var valPaymentPercentForDelivery = parseFormattedFloat($("#PaymentPercentForDelivery").val());
                           if (isFinite(valPaymentPercentForDelivery)) {
                               if (valPaymentPercentForDelivery > 100) valPaymentPercentForDelivery = 100;
                               if (valPaymentPercentForDelivery < (isFinite(valPaymentPercentForContract) ? valPaymentPercentForContract : 0)) valPaymentPercentForDelivery = (isFinite(valPaymentPercentForContract) ? valPaymentPercentForContract : 0);

                               if (!$("#PaymentPercentForDelivery").is(":focus"))
                                   $("#PaymentPercentForDelivery").val(valPaymentPercentForDelivery);
                           }
                           var calculatedPaymentForDelivery = totalPrice * valPaymentPercentForDelivery / 100;
                           $("#sliderPaymentPercentForDelivery").slider("value", isFinite(valPaymentPercentForDelivery) ? valPaymentPercentForDelivery : 0);
                           $("#calculatedPaymentForDelivery").text(isFinite(calculatedPaymentForDelivery) ? shortNumericString(calculatedPaymentForDelivery) : "-");

                           // Slider: payment percent covered by debt

                           var valPaymentPercentForDebt = parseFormattedFloat($("#PaymentPercentForDebt").val());
                           if (isFinite(valPaymentPercentForDebt)) {
                               if (valPaymentPercentForDebt > 100) valPaymentPercentForDebt = 100;
                               if (valPaymentPercentForDebt < 0) valPaymentPercentForDebt = 0;

                               if (!$("#PaymentPercentForDebt").is(":focus"))
                                   $("#PaymentPercentForDebt").val(valPaymentPercentForDebt);
                           }
                           var calculatedDebt = totalPrice * valPaymentPercentForDebt / 100;
                           $("#sliderPaymentPercentForDebt").slider("value", isFinite(valPaymentPercentForDebt) ? valPaymentPercentForDebt : 0);
                           $("#calculatedDebt").text(isFinite(calculatedDebt) ? shortNumericString(calculatedDebt) : "-");
                       }

                       $("#sliderPaymentPercentForContract").slider({
                           min: 0,
                           max: 100,
                           slide: function(event, ui) { $("#PaymentPercentForContract").val(ui.value); },
                           stop: function() { $("#PaymentPercentForContract").trigger("change"); },
                           range: "min"
                       });

                       $("#sliderPaymentPercentForDelivery").slider({
                           min: 0,
                           max: 100,
                           slide: function(event, ui) { $("#PaymentPercentForDelivery").val(ui.value); },
                           stop: function() { $("#PaymentPercentForDelivery").trigger("change"); },
                           range: "min"
                       });

                       $("#sliderPaymentPercentForDebt").slider({
                           min: 0,
                           max: 100,
                           slide: function(event, ui) { $("#PaymentPercentForDebt").val(ui.value); },
                           stop: function() { $("#PaymentPercentForDebt").trigger("change"); },
                           range: "min"
                       });

                       $("#PriceSpecificationType_Total").change(OnPriceSpecificationTypeChanged);
                       $("#PriceSpecificationType_PerEstateArea").change(OnPriceSpecificationTypeChanged);
                       $("#PriceSpecificationType_PerUnitArea").change(OnPriceSpecificationTypeChanged);
                       $("#Price").change(RecalculatePrices).keyup(RecalculatePrices);
                       $("#PricePerEstateArea").change(RecalculatePrices).keyup(RecalculatePrices);
                       $("#PricePerUnitArea").change(RecalculatePrices).keyup(RecalculatePrices);

                       $("#CanHaveDebt").change(OnCanHaveDebtChanged);
                       $("#HasTransferableLoan").change(OnHasTransferableLoanChanged);

                       $("#PaymentPercentForContract").change(RecalculatePrices).keyup(RecalculatePrices).blur(RecalculatePrices);
                       $("#PaymentPercentForDelivery").change(RecalculatePrices).keyup(RecalculatePrices).blur(RecalculatePrices);
                       $("#PaymentPercentForDebt").change(RecalculatePrices).keyup(RecalculatePrices).blur(RecalculatePrices);

                       OnPriceSpecificationTypeChanged();
                       RecalculatePrices();
                       $("#CanHaveDebt").trigger("change");
                       $("#HasTransferableLoan").trigger("change");

                   </script>
    )